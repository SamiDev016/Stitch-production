from frappe.model.document import Document
import frappe

class StitchingAssembly(Document):
    def before_save(self):
        cutting_boms = {}

        main_op_doc = frappe.get_doc("cutting operation", self.main_operation)
        for row in main_op_doc.parent_boms or []:
            if not row.parent_bom:
                continue
            bom_doc = frappe.get_doc("BOM", row.parent_bom)
            cutting_boms[bom_doc.name] = bom_doc

        frappe.msgprint(f"cutting_boms: {list(cutting_boms.keys())}")

        # cutting_boms = self.main_operation_bom

        parent_boms = {}
        parent_bom_doc = frappe.get_doc("Parent BOM", self.parent_bom)
        for bom in parent_bom_doc.boms or []:
            if not bom.bom:
                continue
            bom_doc = frappe.get_doc("BOM", bom.bom)
            parent_boms[bom_doc.name] = bom_doc

        frappe.msgprint(f"parent_boms: {list(parent_boms.keys())}")
        remaining_boms = []
        for bom in parent_boms:
            if bom not in cutting_boms:
                remaining_boms.append(bom)

        frappe.msgprint(f"remaining_boms: {remaining_boms}")


        #باه نتاكد برك
        missing_boms = []
        for bom in cutting_boms:
            if bom not in parent_boms:
                missing_boms.append(bom)

        if missing_boms:
            frappe.throw(f"Les BOMs suivants de l'opération de coupe ne sont pas présents dans le Parent BOM sélectionné : {', '.join(missing_boms)}")

        main_batches = {}
        for batch in frappe.get_all("Parts Batch", filters={
            "source_bom": ["in", list(cutting_boms.keys())],
            "source_operation": self.main_operation,
        }):
            main_batches[batch.name] = batch

        frappe.msgprint(f"main_batches BEFORE: {list(main_batches.keys())}")
        #last filter
        for real_batch in main_batches.copy():
            real_batch_doc = frappe.get_doc("Parts Batch", real_batch)
            if real_batch_doc.color != parent_bom_doc.color or real_batch_doc.size != parent_bom_doc.size:
                main_batches.pop(real_batch)
        

        frappe.msgprint(f"main_batches AFTER: {list(main_batches.keys())}")

        self.set("main_batches", [])

        for real_batch in main_batches:
            real_batch_doc = frappe.get_doc("Parts Batch", real_batch)
            self.append("main_batches", {
                "batch": real_batch_doc.name,
            })
        

        remaining_batches_before = {}
        #remaining batches , remaining BOMS==
        for bom in remaining_boms:
            for batch in frappe.get_all("Parts Batch", filters={
                "source_bom": bom,
            }):
                remaining_batches_before[batch.name] = batch
        
        frappe.msgprint(f"remaining_batches_before: {list(remaining_batches_before.keys())}")
        num_tshirt_template = ""
        variant_items = []

        for cutting_bom in cutting_boms:
            bom_doc = frappe.get_doc("BOM", cutting_bom)
            for bom_doc_item in bom_doc.items:
                if bom_doc_item.qty == 1:
                    num_tshirt_template = bom_doc_item.item_code
                    break
            break  # only look in the first BOM

        frappe.msgprint(f"Template Item: {num_tshirt_template}")

        if num_tshirt_template:
            variant_items = frappe.get_all("Item", filters={
                "variant_of": num_tshirt_template
            }, pluck="name")

        frappe.msgprint(f"Variants of {num_tshirt_template}: {variant_items}")

        for batch in main_batches:
            batch_doc = frappe.get_doc("Parts Batch", batch)
            for part in batch_doc.parts:
                if part.part in variant_items:
                    self.number_of_finish_goods = part.qty
                    frappe.msgprint(f"Matched variant '{part.part}' in batch '{batch_doc.name}', qty: {part.qty}")
                    break
            if self.number_of_finish_goods:
                break 

        frappe.msgprint(f"Final number_of_finish_goods: {self.number_of_finish_goods}")


        main_batch_parts = []
        
        for part in main_batches:
            main_batch_doc = frappe.get_doc("Parts Batch", part)
            for part in main_batch_doc.parts:
                #i don't need qty only the part name
                main_batch_parts.append(part.part) 
        
        frappe.msgprint(f"main_batch_parts: {main_batch_parts}")

        remainig_batch_parts = {}
        parent_bom_doc = frappe.get_doc("Parent BOM", self.parent_bom)
        for part in parent_bom_doc.raw_materials:
            if part.part not in main_batch_parts:
                remainig_batch_parts[part.part] = float(part.qty) * float(self.number_of_finish_goods)
        
        frappe.msgprint(f"remainig_batch_parts: {remainig_batch_parts}")


        remaining_batches_after = {}

        for bom in remaining_boms:
            latest_batch = frappe.get_list(
                "Parts Batch",
                filters={"source_bom": bom},
                fields=["name", "color", "size"],
                order_by="creation desc",
                limit=1
            )
            if latest_batch:
                batch = latest_batch[0]
                remaining_batches_after[batch["name"]] = batch
        for remaining_batch in remaining_batches_after:
            remaining_batch_doc = frappe.get_doc("Parts Batch", remaining_batch)
            if remaining_batch_doc.color != parent_bom_doc.color or remaining_batch_doc.size != parent_bom_doc.size:
                remaining_batches_after.pop(remaining_batch)

        frappe.msgprint(f"remaining_batches_after: {list(remaining_batches_after.keys())}")

        self.set("remaining_batches", [])
        for remaining_batch in remaining_batches_after:
            remaining_batch_doc = frappe.get_doc("Parts Batch", remaining_batch)
            self.append("remaining_batches", {
                "batch": remaining_batch_doc.name,
            })
            frappe.msgprint(f"remaining_batch appended: {remaining_batch_doc.name}")

        
        
            


    
    def on_submit(self):
        if not self.finish_g_warehouse or not self.number_of_finish_goods :
            frappe.throw("Error in the data")

        #getting parts qty

        #Sincreament
        parent_bom_doc = frappe.get_doc("Parent BOM", self.parent_bom)
            
        finish_good = parent_bom_doc.produit_finis

        se = frappe.new_doc("Stock Entry")
        se.purpose = "Material Receipt"
        se.company = frappe.defaults.get_user_default("Company")
        se.append("items", {
            "item_code": finish_good,
            "qty": self.number_of_finish_goods,
            "uom": frappe.db.get_value("Item", finish_good, "stock_uom"),
            "t_warehouse": self.finish_g_warehouse
        })
        se.insert()
        se.submit()

        
        #decreament
        se2 = frappe.new_doc("Stock Entry")
        se2.purpose = "Material Issue"
        se2.company = frappe.defaults.get_user_default("Company")
        
        se2.insert()
        se2.submit() 
        
        

        
        
